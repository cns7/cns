Exercise 1 : 
	To create a calculator server - 
	1. 	new project -> Java Web -> Web Application 
	2. 	new web service -> give package name
		go to design -> add module ...
	3.	Deploy
	4.	Run (Browser will open up)
		In this browser add /'name of your WebService'?Tester (Remember T is caps)
		eg localhost:8080/TestCalculator/CalculatorWebService?Tester
	To create a calculator client - 
	1.	new project -> Java Web -> Web Application
	2. 	new Java web client 
		Here give the WSDL url 
		Get the wsdl from the previous step 4 as given below
		localhost:8080/TestCalculator/CalculatorWebService?WSDL
		Add a package name as something like com.calculatorClient.example
	3. 	In the Webpages folder add jsp files 
		a. 	index.jsp
			Have a form with action = 'arithmetic.jsp' method = 'get'
			Have input in this form name = 'num1' type = 'number'
			Have input in this form name = 'num2' type = 'number'
			input type = 'submit' name = 'submit' value = 'add'
		b.	arithmetic.jsp
			within <% %> type the below given codes 
			com.package_of_client.example.server_service service = new com.package_of_client.example.server_service()
			com.package_of_client.example.server port = service.(autofill)

			now write the required java code
			To convert String to integer use Integer.parseInt(String)
			i.e. int num1 = Integer.parseInt(request.getParameter("num1"));
			only in the return statement use result = port.add(num1,num2);
			out.println(result)

Exercise 2 : 
	Set up apache axis2
		a. Download the tar file and extract it to webapps of tomcat 
		b. Download the axis2 nbm file and do
			Tools -> plugins -> downloaded -> addplugins -> select this file
		b. in Tools -> options -> axis2 do the necessary steps by giving path, username, password etc 
			Path is localhost:8080/axis2
	1. 	new project -> java class library 
	2. 	new axis2 client from java
	3. 	Add an add function below the hello function
	4. 	find the .aar file in the project folder (outside netbeans, in normal finder), open with winrar, under META_INF, 
		there will be an xml file, change the file accordingly by altering in-only and in-out lines and then restart tomcat server
	5. Right click on the webservice and deploy. 
	6. go to localhost:8080/axis2
	7. click services 
	8. choose your service 
	9. in the bar if add, type
		../add?x=2&y=3




Exercise 3 & 4 & 5 : 
	For ssh, scp, etc
	Create two VMs and their network settings must be bridged adapter with Allow all
	Their respective iPv4 addresses are 
	address : 10.6.15.(system number + 100) && 10.6.15.(system number + 150) 
	{to be safe, try ipconfig in windows and see if the IP, first 3 numbers are similar}
	netmask : 255.255.128.0
	gateway : 10.6.0.1
	DNS :	  10.101.1.10

	> sudo apt-get update
	> sudo apt-get install openssh-server
	> sudo apt-get install openssh-client

	Now try - 
		ssh -X usernameVM1@ipofVM1
		scp file1.txt usernameVM1@ipofVM1:/home/username/

	if this doesnt work -
	> sudo apt-get update 
	> sudo ufw allow 22 
	then try again

	For installing java and javac, 
	just type java and javac into the terminal and it will recommend the packages to be downloaded

	for remote login without password 
	> ssh-keygen -t rsa
	> cd /
	> cd home/username
	> cd .ssh
	> chmod 777 id_rsa.pub
	> cat id_rsa.pub >> authorised_keys
	> ssh-copy-id usernameVM1@ipofVM1
	> ssh -X usernameVM1@ipofVM1

	in a server, because there is no GUI, we have to set the network information via terminal
	to do so, edit the document in /etc/network/interfaces
	> sudo nano /etc/network/interfaces
	replace 
		"auto eth0
		 iface eth0 inet dhcp"
	with 
		"iface eth0 inet static
  			address 10.6.15.(system number + 100)
  			gateway 10.6.0.1
  			netmask 255.255.128.0
  			network 10.6.0.0"
	to change the DNS server, edit the /etc/resolv.conf file
	> sudo nano /etc/resolv.conf
	replace 
		"nameserver 192.168.0.1"
	with
		"nameserver 10.101.1.10"
	> sudo service networking start
	> sudo /etc/init.d/networking restart

Exercise 6 : 

	For this install cloud controller first 
	iP - 10.6.15.(100 + system number)
	For range of iPs, just copy the example given
	Tick everyting other than node controller 

	Node controller 
	iP - 10.6.15.(system number + 150)
	Here the client system must not have its proxy set 
	not sure about manual ip setting, (try without and with)
	Tick only node controller


	Now to access the eucalyptus page in the browser 
	type in
	https://ip_of_cloudcontroller:8443
	should work

	download the credentials 
	now use scp and copy the downloaded zip file from the local machine to the cloudcontroller -> /home/username/
	In cloud controller
	now create a secret directory 
	> mkdir -p ~/.euca
	> cd euca
	> chmod 700 ~/.euca
	> sudo euca_conf --get-credentials zipfile.zip

	In the normal VM do 
	> sudo apt-get update
	> sudo apt-get install euca2ools
	> unzip zipfile.zip
	Open the eucarc file and note down ec2_URL, ec2_accessKey and ec2_secretkey
	> euca-create-volume -U ec2_URL -I ec2_accessKey -S ec2_secretKey --size 1 -z cluster1
	> euca-describe-volume -U ec2_URL -I ec2_accessKey -S ec2_secretKey

Exercise 7 : OpenNebula

	Create two virtual machines VM1 and VM2. 
	
	in VM1 
	shift to the root by doing 
	> sudo -s
	then execute the following commands - 
	> sudo apt-get update
	> wget -q -O- https://downloads.opennebula.org/repo/repo.key | apt-key add -
	> sudo apt-get update
	> apt-get install opennebula opennebula-sunstone opennebula-gate opennebula-flow
	> sudo apt-get update
	> apt-get install opennebula opennebula-sunstone opennebula-gate opennebula-flow
	> sudo /usr/share/one/install_gems
	> sudo gedit /var/lib/one/.one/one_auth
	This will give you the password
	shift to oneadmin
	> su oneadmin
	> systemctl start opennebula
	> systemctl start opennebula-sunstone
	now go to browser and type
	localhost:9869
	login with 
	user : oneadmin
	password : that obtained from one_auth file

	in VM2
	shift to the root by doing 
	> sudo -s
	then execute the following commands - 
	> sudo apt-get update
	> wget -q -O- https://downloads.opennebula.org/repo/repo.key | apt-key add -
	> sudo apt-get update
	> apt-get install opennebula opennebula-sunstone opennebula-gate opennebula-flow
	> sudo apt-get update
	> apt-get install opennebula opennebula-sunstone opennebula-gate opennebula-flow
	> sudo apt-get update 
	> sudo apt-get install opennebula-node

Exercise 8 :
	shift to root
	> sudo -s
	shift to oneadmin
	> su oneadmin
	> onehost list 
	> onevnet list
	> oneimage list
	> onetemplate list
	> onevm list
	> onehost create localhost -i kvm -v kvm -n dummy
	> cd var/lib/one
	> sudo gedit mynetwork.one
		NAME = "private"
		BRIDGE = br0
		AR = [
			TYPE = IP4,
			IP = 192.168.0.0,
			SIZE = 200
		]
	> onevnet create mynetwork.one
	download an iso file (Prefer ubuntu because it is smaller)
	> oneimage create --name "ubz" --path "/home/username/Downloads" --driver qcow2 --datastore default
	if you are doing it in the dashboard, then device prefix must be hd
	Go to the dashboard and create a template and set architecture as x86 and then a VM
	> find a ssh key in var/lib/one/.ssh/id_rsa.pub and paste it in dashboard -> oneadmin (in navbar) --> settings --> public key
Exercise 9 :
	After doing the steps of excercise 8, create another host, enable both of them
	> onevm deploy <vm-id> <host-id>
	> onevm migrate <vm-id> <host-id>